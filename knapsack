function knapsack(weights, values, W)
    n = length(weights); // Number of items
    // Create a 2D array to store the maximum value at each subproblem
    dp = zeros(n+1, W+1);
    
    // Fill the dp array using the recursive formula
    for i = 1:n
        for w = 0:W
            if weights(i) <= w
                dp(i+1, w+1) = max(dp(i, w+1), dp(i, w+1-weights(i)) + values(i));
            else
                dp(i+1, w+1) = dp(i, w+1);
            end
        end
    end
    
    // The result is stored in dp(n+1, W+1)
    disp("Maximum value in Knapsack: " + string(dp(n+1, W+1)));
endfunction

// Example usage
weights = [1, 3, 4, 5];
values = [1, 4, 5, 7];
W = 7;
knapsack(weights, values, W);
